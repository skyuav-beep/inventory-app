services:
  db:
    image: postgres:15-alpine
    container_name: inventory-db
    environment:
      POSTGRES_DB: inventory
      POSTGRES_USER: inventory
      POSTGRES_PASSWORD: inventory
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U inventory']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '5443:5432'

  api:
    build:
      context: ../
      dockerfile: apps/api/Dockerfile
    container_name: inventory-api
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ../.env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: ${DATABASE_URL:-postgres://inventory:inventory@db:5432/inventory}
      JWT_SECRET: ${JWT_SECRET:-changeme}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:-}
      ALERT_COOLDOWN_MINUTES: ${ALERT_COOLDOWN_MINUTES:-60}
      QUIET_HOURS: ${QUIET_HOURS:-22-07}
    ports:
      - '3000:3000'
    volumes:
      - ../apps/api:/app
      - ../packages:/packages
      - api_node_modules:/app/node_modules
    command: npm run start:dev

  web:
    image: node:20-alpine
    container_name: inventory-web
    working_dir: /app
    ports:
      - '5173:5173'
    volumes:
      - ../apps/web:/app
      - ../packages:/packages
      - web_node_modules:/app/node_modules
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://api:3000}
    command: npm run dev -- --host 0.0.0.0
    depends_on:
      - api

  nginx:
    image: nginx:1.25-alpine
    container_name: inventory-nginx
    depends_on:
      - api
      - web
    ports:
      - '8080:80'
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro

volumes:
  postgres_data:
  api_node_modules:
  web_node_modules:
