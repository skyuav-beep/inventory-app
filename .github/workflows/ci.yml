name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  lint-and-format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

  test-api:
    runs-on: ubuntu-latest
    needs: lint-and-format
    services:
      inventory-db:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: inventory_test
        ports:
          - 55432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=6

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 55432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory_test
      PGPASSWORD: postgres
      DATABASE_URL: postgresql://postgres:postgres@localhost:55432/inventory_test
      E2E_USE_REAL_DB: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Wait for PostgreSQL service
        run: |
          for i in {1..30}; do
            if pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER"; then
              exit 0
            fi
            sleep 1
          done
          echo "PostgreSQL service did not become ready in time" >&2
          exit 1

      - name: Create test database
        run: |
          if ! psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '${POSTGRES_DB}'" | grep -q 1; then
            psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -c "CREATE DATABASE ${POSTGRES_DB};"
          fi

      - name: Run Prisma migrations
        run: npm --workspace apps/api run prisma:migrate:deploy

      - name: Run API tests (unit + e2e)
        run: npm --workspace apps/api test

      - name: Show PostgreSQL container info & logs
        if: always()
        run: |
          echo "Listing docker containers"
          docker ps -a --format "{{.ID}} {{.Names}} {{.Status}}"
          echo "Trying to find postgres container..."
          CONTAINER_ID=$(docker ps -a --filter "ancestor=postgres:16" -q)
          if [ -z "$CONTAINER_ID" ]; then
            CONTAINER_ID=$(docker ps -a --filter "name=postgres" -q || true)
          fi
          if [ -z "$CONTAINER_ID" ]; then
            CONTAINER_ID=$(docker ps -a --filter "name=inventory-db" -q || true)
          fi
          if [ -n "$CONTAINER_ID" ]; then
            echo "=== docker logs for $CONTAINER_ID ==="
            docker logs "$CONTAINER_ID" || true
          else
            echo "No postgres container found"
          fi

  deploy-production:
    runs-on: ubuntu-latest
    needs: test-api
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create deployment .env
        run: |
          cat <<'EOF' > .env
          DATABASE_URL=${{ secrets.DEPLOY_DATABASE_URL }}
          JWT_SECRET=${{ secrets.DEPLOY_JWT_SECRET }}
          TELEGRAM_BOT_TOKEN=${{ secrets.DEPLOY_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID=${{ secrets.DEPLOY_TELEGRAM_CHAT_ID }}
          ADMIN_SEED_EMAIL=${{ secrets.DEPLOY_ADMIN_EMAIL }}
          ADMIN_SEED_NAME=${{ secrets.DEPLOY_ADMIN_NAME }}
          ADMIN_SEED_PASSWORD=${{ secrets.DEPLOY_ADMIN_PASSWORD }}
          THROTTLE_DEFAULT_TTL=${{ secrets.DEPLOY_THROTTLE_DEFAULT_TTL }}
          THROTTLE_DEFAULT_LIMIT=${{ secrets.DEPLOY_THROTTLE_DEFAULT_LIMIT }}
          EOF
          chmod 600 .env

      - name: Prepare SSH
        run: |
          set -euo pipefail
          PORT="${DEPLOY_PORT:-22}"
          mkdir -p ~/.ssh
          ssh-keyscan -p "$PORT" "$DEPLOY_HOST" >> ~/.ssh/known_hosts
          printf '%s\n' "$DEPLOY_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Sync source to server
        run: |
          set -euo pipefail
          PORT="${DEPLOY_PORT:-22}"
          rsync -az --delete \
            -e "ssh -p $PORT" \
            --exclude ".git" \
            --exclude "node_modules" \
            ./ "$DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/"

      - name: Compose up on remote
        run: |
          set -euo pipefail
          PORT="${DEPLOY_PORT:-22}"
          ssh -p "$PORT" "$DEPLOY_USER@$DEPLOY_HOST" "
            set -euo pipefail
            cd '$DEPLOY_PATH'
            docker compose -f infra/docker-compose.yml down --remove-orphans || true
            docker compose -f infra/docker-compose.yml pull || true
            PROJECT_NAME=\"\${COMPOSE_PROJECT_NAME:-infra}\"
            POSTGRES_VOLUME=\"\${PROJECT_NAME}_postgres_data\"
            TEMP_VOLUME=\"\${POSTGRES_VOLUME}_v16\"
            DB_SUPERUSER=\"postgres\"
            DB_SUPERUSER_PASSWORD=\"\"
            if [ -f .env ]; then
              DATABASE_URL_VALUE=$(grep '^DATABASE_URL=' .env | head -n 1 | cut -d= -f2-)
            else
              DATABASE_URL_VALUE=\"\"
            fi
            if [ -n \"\$DATABASE_URL_VALUE\" ]; then
              URL_NO_PROTO=\${DATABASE_URL_VALUE#*://}
              CREDS=\${URL_NO_PROTO%%@*}
              DB_SUPERUSER=\${CREDS%%:*}
              if [ \"\$CREDS\" = \"\$DB_SUPERUSER\" ]; then
                DB_SUPERUSER_PASSWORD=\"\"
              else
                DB_SUPERUSER_PASSWORD=\${CREDS#*:}
              fi
            fi
            if [ -n \"\${POSTGRES_SUPERUSER:-}\" ]; then
              DB_SUPERUSER=\"\$POSTGRES_SUPERUSER\"
            fi
            if [ -n \"\${POSTGRES_SUPERUSER_PASSWORD:-}\" ]; then
              DB_SUPERUSER_PASSWORD=\"\$POSTGRES_SUPERUSER_PASSWORD\"
            fi
            DB_SUPERUSER=\${DB_SUPERUSER:-inventory}
            if docker volume inspect \"\$POSTGRES_VOLUME\" >/dev/null 2>&1; then
              CURRENT_VERSION=\$(docker run --rm -v \"\$POSTGRES_VOLUME\":/var/lib/postgresql/data alpine:3.19 sh -c 'if [ -f /var/lib/postgresql/data/PG_VERSION ]; then cat /var/lib/postgresql/data/PG_VERSION; fi' | tr -d '\\r' | tr -d '\\n')
              if [ -n \"\$CURRENT_VERSION\" ]; then
                echo \"Detected existing Postgres volume version: \$CURRENT_VERSION\"
              fi
              CURRENT_MAJOR=\${CURRENT_VERSION%%.*}
              if [ \"\$CURRENT_MAJOR\" = \"15\" ]; then
                echo \"Upgrading Postgres data volume to 16...\"
                docker pull tianon/postgres-upgrade:15-to-16 || true
                docker volume rm \"\$TEMP_VOLUME\" >/dev/null 2>&1 || true
                docker volume create \"\$TEMP_VOLUME\" >/dev/null
                if [ -n \"\$DB_SUPERUSER_PASSWORD\" ]; then
                  docker run --rm \\
                    -e POSTGRES_USER=\"\$DB_SUPERUSER\" \\
                    -e POSTGRES_PASSWORD=\"\$DB_SUPERUSER_PASSWORD\" \\
                    -v \"\$POSTGRES_VOLUME\":/var/lib/postgresql/15/data \\
                    -v \"\$TEMP_VOLUME\":/var/lib/postgresql/16/data \\
                    tianon/postgres-upgrade:15-to-16
                else
                  docker run --rm \\
                    -e POSTGRES_USER=\"\$DB_SUPERUSER\" \\
                    -v \"\$POSTGRES_VOLUME\":/var/lib/postgresql/15/data \\
                    -v \"\$TEMP_VOLUME\":/var/lib/postgresql/16/data \\
                    tianon/postgres-upgrade:15-to-16
                fi
                docker run --rm \\
                  -v \"\$TEMP_VOLUME\":/var/lib/postgresql/16/data \\
                  postgres:16 sh -c 'set -eu; chown -R postgres:postgres /var/lib/postgresql/16/data'
                docker run --rm \\
                  -v \"\$POSTGRES_VOLUME\":/var/lib/postgresql/old \\
                  postgres:16 sh -c 'set -eu; cd /var/lib/postgresql/old; rm -f pg15_backup_before_pg16.tar; tar -cf pg15_backup_before_pg16.tar .; rm -rf ./* ./.??*'
                docker run --rm \\
                  -v \"\$POSTGRES_VOLUME\":/var/lib/postgresql/old \\
                  -v \"\$TEMP_VOLUME\":/var/lib/postgresql/new \\
                  postgres:16 sh -c 'set -eu; tar -C /var/lib/postgresql/new -cf - . | tar -C /var/lib/postgresql/old -xf -'
                docker run --rm \\
                  -v \"\$POSTGRES_VOLUME\":/var/lib/postgresql/old \\
                  postgres:16 sh -c 'set -eu; rm -f /var/lib/postgresql/old/pg15_backup_before_pg16.tar'
                docker run --rm \\
                  -v \"\$POSTGRES_VOLUME\":/var/lib/postgresql/data \\
                  postgres:16 sh -c 'set -eu; if [ -f /var/lib/postgresql/data/analyze_new_cluster.sh ]; then chmod +x /var/lib/postgresql/data/analyze_new_cluster.sh; gosu postgres /var/lib/postgresql/data/analyze_new_cluster.sh; rm -f /var/lib/postgresql/data/analyze_new_cluster.sh /var/lib/postgresql/data/delete_old_cluster.sh; fi'
                docker volume rm \"\$TEMP_VOLUME\"
              elif [ -n \"\$CURRENT_VERSION\" ] && [ \"\$CURRENT_MAJOR\" != \"16\" ]; then
                echo \"Unsupported Postgres data version: \$CURRENT_VERSION\" >&2
                exit 1
              fi
            fi
            docker compose -f infra/docker-compose.yml up -d --build
            docker compose -f infra/docker-compose.yml ps
            docker compose -f infra/docker-compose.yml logs --tail=200 db || true
            docker compose -f infra/docker-compose.yml logs --tail=200 api || true
          "

      - name: Prisma migrate & seed
        run: |
          set -euo pipefail
          PORT="${DEPLOY_PORT:-22}"
          ssh -p "$PORT" "$DEPLOY_USER@$DEPLOY_HOST" "
            set -euo pipefail
            cd '$DEPLOY_PATH'
            docker compose -f infra/docker-compose.yml exec -T api npx prisma migrate deploy
            docker compose -f infra/docker-compose.yml exec -T api npm run seed || true
          "
